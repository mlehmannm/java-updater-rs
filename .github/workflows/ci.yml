name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Cargo should always colorise output.
  CARGO_TERM_COLOR: always
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # Reset to disable failure on clippy warnings.
  RUSTFLAGS: ""

jobs:
  build_and_test:
    name: Java Updater
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        toolchain: [nightly, stable]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rustup
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Setup Rust Toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - name: Build (no default features)
        id: minimal
        run: cargo build --no-default-features --verbose
        continue-on-error: true
      - name: Check that minimal build failed
        if: ${{ (failure() || success()) && steps.minimal.outcome }} == 'success'
        run: exit 1
      - name: Build (with default features)
        run: cargo build --verbose
      - name: Test
        run: cargo test --verbose
